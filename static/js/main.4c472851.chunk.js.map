{"version":3,"sources":["layout/Navbar.js","places/Places.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","this","props","title","Component","Places","useState","temppDes","temperature","weath","setweath","useEffect","temperatureC","error","time","weatherIconUrl","src","alt","style","width","onClick","temperatureF","place","windspeed","Search","onSubmit","getWeather","type","name","placeholder","App","state","description","urlPic","e","a","preventDefault","target","elements","value","fetch","api","json","data","current_condition","setState","temp_C","temp_F","windspeedKmph","observation_time","request","query","weatherDesc","apis","datae","hits","largeImageURL","apiImage","Images","results","urls","full","background","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c472851.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport class Navbar extends Component {\r\n\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"Title\">\r\n                <i className=\"fas fa-cloud-sun\"></i>{this.props.title} </h1>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React , {useState,useEffect} from 'react'\r\n\r\n    const Places = (props) => {\r\n\r\n        const [weath,setweath] = useState({\r\n            temppDes:'  °C',\r\n            temperature: ''\r\n       });\r\n\r\n\r\n       useEffect (() => { \r\n        setweath({temperature: props.temperatureC }) \r\n    }, [props.temperatureC])\r\n\r\n\r\n        return(\r\n        <div> \r\n            {props.error &&   <div className='card text-center'> <p> Error : {props.error} </p> </div>  }  \r\n            {props.time  && \r\n            <div className='card text-center ' >\r\n                {props.time && <h4>{props.time}</h4> } \r\n                {props.weatherIconUrl && <img src={props.weatherIconUrl} alt='' className='round-img' style={{ width : '60px'}}/> } \r\n                <h1 className='elnumero'>  {weath.temperature}\r\n                    <span  onClick={() => setweath({...weath,temppDes:'  °C',temperature:props.temperatureC})}>  °C</span> |\r\n                    <span   onClick={() =>setweath({...weath,temppDes:'  °F',temperature:props.temperatureF})}>  °F</span>\r\n                </h1> \r\n\r\n                {/* <h1 className='elnumero'>  {weath.temperature}\r\n\r\n                <span className=\"elFelsa\" onClick={() => \r\n                weath.temppDes === '  °C' ?\r\n                setweath({...weath,temppDes:'  °F',temperature:props.temperatureF}) : setweath({...weath,temppDes:'  °C',temperature:props.temperatureC})\r\n            \r\n            \r\n            }>{weath.temppDes}</span> \r\n</h1> */}\r\n\r\n\r\n\r\n                {props.place &&    <h3>   {props.place} </h3> }\r\n                {props.windspeed &&    <h5>   {props.windspeed} Kmp/h </h5> }\r\n            </div>}\r\n\r\n        </div>\r\n\r\n      )\r\n}\r\n\r\nexport default Places ;\r\n","import React from 'react';\r\n\r\n\r\nconst Search = (props) => {\r\n        return(\r\n                <div > \r\n                        <form onSubmit={props.getWeather} >\r\n                        <input className='InputSearch' type='text' name='place' placeholder='Enter a Place ...'/>\r\n                        </form>\r\n                </div>\r\n        )\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './layout/Navbar';\nimport Places from './places/Places';\nimport Search from './components/Search';\n\n\nclass App extends Component {\n  \n  state = {\n    temperatureC : '',\n    place : '',\n    temperatureF : '',\n    windspeed :'',\n    time : '',\n    weatherIconUrl : '',\n    description : '',\n    urlPic : '',\n    error : '',\n  }\n\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const place = e.target.elements.place.value;\n    if(place){\n      const api = await fetch(`https://api.worldweatheronline.com/premium/v1/weather.ashx?key=09013dfb701d4ccbb87155920192208&q=${place}&format=json`);\n      const data = await api.json();\n      if(data.data.current_condition){\n      this.setState({\n        temperatureC : data.data.current_condition[0].temp_C,\n        temperatureF : data.data.current_condition[0].temp_F,\n        windspeed : data.data.current_condition[0].windspeedKmph,\n        time : data.data.current_condition[0].observation_time,\n        place : data.data.request[0].query,\n        description : data.data.current_condition[0].weatherDesc[0].value,\n        weatherIconUrl : data.data.current_condition[0].weatherIconUrl[0].value,\n        error : ''\n      })\n    }\n    else{\n      this.setState({\n        temperatureC : '',\n        description : '',\n        place : '',\n        temperatureF : '',\n        windspeed :'',\n        time : '',\n        weatherIconUrl : '',\n        urlPic : '',\n        error : 'Please Enter Correct City & Country '  })\n    }\n\n      const apis = await fetch(`https://pixabay.com/api/?key=13505607-5594b8502d53f3c87ed57cc99&q=${this.state.place}`);\n      const datae = await apis.json();\n      if(datae.hits[0]){\n        this.setState({ urlPic : datae.hits[0].largeImageURL })\n          }\n        else{\n          const apiImage = await fetch(`https://api.unsplash.com/search/photos?page=1&client_id=1958f501736b8c2622d8838a39f09b163b7e8a5a1ccc0fde55cbce633e9c8e3e&query=${this.state.place}`);\n          const Images = await apiImage.json();\n          if(Images.results[0]){\n            this.setState({ urlPic : Images.results[0].urls.full })\n          }\n          else{\n          this.setState({\n            temperatureC : '',\n            place : '',\n            temperatureF : '',\n            windspeed :'',\n            time : '',\n            description : '',\n            weatherIconUrl : '',\n            urlPic : '',\n            error : 'Please Enter Correct City & Country '  })\n          }\n        }\n        \n    }\n    else{\n          this.setState({\n            temperatureC : '',\n            place : '',\n            temperatureF : '',\n            windspeed :'',\n            time : '',\n            description : '',\n            weatherIconUrl : '',\n            urlPic : '',\n            error : 'Please Enter Your City or Country'  })\n        }\n  }\n\n  render() {\n    return (\n      <div style={ {\n        background: ` url(${this.state.urlPic})  no-repeat center center  /cover `  }}\n        >\n        <Navbar title='Weather Now'/>\n        <div className=\"App\"  \n           >\n\n                <Search getWeather={this.getWeather} / >\n                <Places place={this.state.place}  \n                        temperatureC={this.state.temperatureC} \n                        temperatureF={this.state.temperatureF} \n                        time={this.state.time} \n                        windspeed={this.state.windspeed} \n                        weatherIconUrl={this.state.weatherIconUrl} \n                        error={this.state.error} \n                        />\n      \n        </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}